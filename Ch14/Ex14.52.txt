Question: Which operator+, if any, is selected for each of the addition expressions? List the candidate functions, the viable functions, and the type conversions on the arguments for each viable function:

Code: 

struct LongDouble 
{
    // member operator+ for illustration purposes; + is usually a nonmember
    LongDouble operator+(const SmallInt&);
    // other members as in § 14.9.2 (p. 587)
};
LongDouble operator+(LongDouble&, double);
SmallInt si;
LongDouble ld;
ld = si + ld;
ld = ld + si;

Answer:

ld = si + ld: 
    candidate functions: all built-in operator+, LongDouble::operator+(const SmallInt&), operator+(LongDouble&, double) - SmallInt -> int -> double, SmallInt::operator+(const SmallInt&, const SmallInt&) - LongDouble -> double/float -> int -> SmallInt
    viable functions: all built-in operator+ 
    Error, no best match function

ld = ld + si:
    candidate functions: all built-in operator+, LongDouble::operator+(const SmallInt&), operator+(LongDouble&, double) - SmallInt -> int -> double, SmallInt::operator+(const SmallInt&, const SmallInt&) - LongDouble -> double/float -> int -> SmallInt
    viable functions: all built-in operator+, LongDouble::operator+(const SmallInt&), LongDouble::operator+(LongDouble&, double)
    Matched to function LongDouble::operator+(const SmallInt&)